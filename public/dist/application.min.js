"use strict";const ApplicationConfiguration={applicationModuleName:"mean",applicationModuleVendorDependencies:["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload","ngMaterial","ngTable"],registerModule:function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module("mean").requires.push(moduleName)}};angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.getMockUser=function(){return{_id:"59e8f85f4fec93497c42b75e",firstName:"Tim",lastName:"Tebow",gender:"male",birthday:"2015-02-03T05:00:00.000Z",email:"trenflem@gmail.com",role:"participant"}},$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){if(void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role))return allowed=!0,!0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{abstract:!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("participant-portal",{url:"/participant",templateUrl:"modules/core/client/views/participant-portal.client.view.html"}).state("studies",{url:"/studies",templateUrl:"modules/core/client/views/studies.client.view.html"}).state("studies.discover",{url:"/discover",templateUrl:"modules/core/client/views/study-discovery.client.view.html"}).state("studies.sign-up",{url:"/sign-up/:studyId",templateUrl:"modules/core/client/views/study-sign-up.client.view.html"}).state("studies.thank-you",{url:"/thank-you",templateUrl:"modules/core/client/views/study-thank-you.client.view.html"}).state("researcher-portal",{url:"/researcher",templateUrl:"modules/core/client/views/researcher-portal.client.view.html"}).state("studies.create",{url:"/create",templateUrl:"modules/core/client/views/study-create.client.view.html"}).state("studies.edit",{url:"/edit/:studyId",templateUrl:"modules/core/client/views/study-edit.client.view.html"}).state("sessions",{url:"/sessions/:studyId",templateUrl:"modules/core/client/views/session-handle.client.view.html"}).state("sessions-create",{url:"/create/:studyId",templateUrl:"modules/core/client/views/session-create.client.view.html"}).state("faculty-portal",{url:"/faculty",templateUrl:"modules/core/client/views/faculty-portal.client.view.html"}).state("admin-portal",{url:"/admin",templateUrl:"modules/core/client/views/admin-portal.client.view.html"}).state("manage-users",{url:"/admin-portal.manage-users",templateUrl:"modules/core/client/views/manage-users.client.view.html"}).state("manage-studies",{url:"/admin-portal.manage-studies",templateUrl:"modules/core/client/views/manage-studies.client.view.html"}).state("manage-sessions",{url:"/admin-portal.manage-sessions",templateUrl:"modules/core/client/views/manage-sessions.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("AdminPortalController",["$scope","$http","NgTableParams",function($scope,$http,NgTableParams){let alreadyClicked=!1;const init=()=>{$("section.ng-scope").css("margin-top","0px"),$("section.ng-scope").css("margin-bottom","0px"),$scope.admin.getWaitingUsers().then(results=>{$scope.allUsers=results.data,$scope.approvalTable=new NgTableParams({count:10,sorting:{lastName:"asc"}},{counts:[],dataset:$scope.allUsers})}).catch(err=>{console.log(err)})};$scope.approvalDetails=function(user,index){$scope.currentUser=user,$scope.currentIndex=index,$scope.error="",$("#approvalModal").modal("show")},$scope.approveUser=function(){alreadyClicked||($scope.error="",alreadyClicked=!0,console.log("Approved!"),$http.put(window.location.origin+"/api/admin/approval/"+$scope.currentUser._id).then(()=>{init(),$("#approvalModal").modal("hide"),alreadyClicked=!1}).catch(err=>{console.log(err),$scope.error=err,alreadyClicked=!1}))},$scope.denyUser=function(){alreadyClicked||($scope.error="",alreadyClicked=!0,console.log("DENIED!"),$http.delete(window.location.origin+"/api/admin/approval/"+$scope.currentUser._id).then(()=>{init(),$("#approvalModal").modal("hide"),alreadyClicked=!1}).catch(err=>{console.log(err),$scope.error=err,alreadyClicked=!1}))},$scope.admin={getWaitingUsers:function(){return $http.get(window.location.origin+"/api/admin/approval").then(results=>results).catch(err=>err)}},init()}]),angular.module("core").controller("StudyController",["$scope","$rootScope","$http","$state","$document",function($scope,$rootScope,$http,$state,$document){console.log($rootScope.getMockUser()),$document.ready(()=>{$scope.request=window.location.pathname,$scope.pass=$scope.request.slice(14),window.location.pathname.includes("edit")&&$scope.init()}),$scope.init=function(){$scope.getStudy($scope.pass).then(results=>{$scope.study=results,console.log($scope.study),$scope.study.title=$scope.study.data.title,$scope.study.location=$scope.study.data.location,$scope.study.irb=$scope.study.data.irb,$scope.study.compensationType=$scope.study.data.compensationType,$scope.study.maxParticipants=$scope.study.data.maxParticipants,$scope.study.maxParticipantsPerSession=$scope.study.data.maxParticipantsPerSession,$scope.study.description=$scope.study.data.description}).catch(err=>{console.log(err)})},$scope.getStudy=function(studyId){return $http.get(window.location.origin+"/api/studies/"+studyId).then(results=>results).catch(err=>err)},$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),alert("Invalid JSON"),!1;$http.post("/api/studies/create",$scope.study).success(response=>{console.log("PV","Study Created!"),$state.go("researcher-portal")}).error(response=>{$scope.error=response.message,alert(response.message)})},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),alert("Invalid JSON"),!1;$http.put("/api/studies/"+$scope.pass,$scope.study).success(response=>{console.log("PV","Study Updated!")}).error(response=>{$scope.error=response.message,alert(response.message)})}}]),angular.module("core").controller("FacultyPortalController",["$scope","$http","NgTableParams","$rootScope",function($scope,$http,NgTableParams,$rootScope){$scope.extraCredit={},$scope.newCourse={};let alreadyClicked=!1;$scope.init=function(){$("section.ng-scope").css("margin-top","0px"),$("section.ng-scope").css("margin-bottom","0px"),$scope.courses.getAll().then(results=>{$scope.allCourses=results.data})},$scope.populateCourse=function(){$scope.sessions.extraCreditByCourse($scope.selectedCourse.name).then(results=>{$scope.extraCredit.data=results.data,console.log($scope.extracredit),$scope.extraCredit=new NgTableParams({count:10,sorting:{lastName:"asc"}},{counts:[],dataset:$scope.extraCredit.data})})},$scope.addCourse=function(){alreadyClicked||($scope.error="",$scope.newCourse.name?$http.post("/api/courses/",$scope.newCourse).success(response=>{$("#addCourseModal").modal("hide"),$scope.init(),alreadyClicked=!1}).error(response=>{$scope.error=response.message,alreadyClicked=!1}):$scope.error="The course name cannot be empty!")},$scope.exportCSV=function(){const fileName="Grades-"+$scope.selectedCourse.name+".csv";let mimeType="text/csv;encoding=utf-8";$scope.extraCredit.data;let data=[["Student"]];for(let i=0;i<$scope.extraCredit.data.length;i++){const tempArray=['"'+$scope.extraCredit.data[i].lastName+", "+$scope.extraCredit.data[i].firstName+'"'];data.push(tempArray)}let lineArray=[];data.forEach(function(infoArray,index){let line=infoArray.join("");lineArray.push(line)});let csvContent=lineArray.join("\n"),a=document.createElement("a");mimeType=mimeType||"application/octet-stream",navigator.msSaveBlob?navigator.msSaveBlob(new Blob([csvContent],{type:mimeType}),fileName):URL&&"download"in a?(a.href=URL.createObjectURL(new Blob([csvContent],{type:mimeType})),a.setAttribute("download",fileName),document.body.appendChild(a),a.click(),document.body.removeChild(a)):location.href="data:application/octet-stream,"+encodeURIComponent(csvContent)},$scope.sessions={extraCreditByCourse:function(courseName){return $http.get(window.location.origin+"/api/sessions/course/"+courseName).then(results=>results).catch(err=>err)}},$scope.courses={getAll:function(){return $http.get(window.location.origin+"/api/courses/").then(results=>results).catch(err=>err)},create:function(newCourse){return $.ajax({url:window.location.origin+"/api/courses/",type:"POST",contentType:"application/json",dataType:"json",data:JSON.stringify(newCourse)})}},$scope.init()}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").controller("ParticipantPortalController",["$scope","$http","$state","Authentication","NgTableParams",function($scope,$http,$state,Authentication,NgTableParams){let alreadyClicked=!1;$scope.init=function(){$("section.ng-scope").css("margin-top","0px"),$("section.ng-scope").css("margin-bottom","0px"),$scope.upcomingSessions={},$scope.upcomingSessions.data=[],$scope.pastSessions={},$scope.pastSessions.data=[],$scope.user=Authentication.user,console.log($scope.user),$scope.user||$state.go("authentication.signin"),$scope.sessions.getUserSessions($scope.user._id).then(results=>{$scope.allSessions=results.data,console.log($scope.allSessions);const today=new Date;let date;$scope.allSessions.forEach(session=>{date=new Date(session.startTime),session.date=`${date.getMonth()+1}/${date.getDate()}/${date.getFullYear()}`,session.time=`${date.getHours()>12?date.getHours()-12:date.getHours()}:${date.getMinutes()<10?"0"+date.getMinutes():date.getMinutes()} ${date.getHours()>=12?"PM":"AM"}`,date>=today?$scope.upcomingSessions.data.push(session):$scope.pastSessions.data.push(session)}),$scope.upcomingSessions=new NgTableParams({count:5,sorting:{startTime:"asc"}},{counts:[],dataset:$scope.upcomingSessions.data}),$scope.pastSessions=new NgTableParams({count:5,sorting:{startTime:"desc"}},{counts:[],dataset:$scope.pastSessions.data})}).catch(err=>{console.log(err)})},$scope.sessionDetails=function(session,currentTable,index){$scope.currentSession=session,$scope.currentIndex=index,$scope.currentTable=currentTable,$scope.error=!1,$("#detailModal").modal("show")},$scope.cancelClose=function(){alreadyClicked||$("#cancelModal").modal("hide")},$scope.confirmCancel=function(){if(!alreadyClicked){alreadyClicked=!0;const cancellor=$scope.user;cancellor.date=$scope.currentSession.date,cancellor.time=$scope.currentSession.time,$scope.sessions.cancel($scope.currentSession._id,cancellor).then(()=>{$scope.init(),$("#cancelModal").modal("hide"),alreadyClicked=!1}).catch(err=>{$scope.error=!0,console.log(err),alreadyClicked=!1})}},$scope.sessions={getAll:function(){return $http.get(window.location.origin+"/api/sessions/").then(results=>results).catch(err=>err)},getUserSessions:function(userId){return $http.get(window.location.origin+"/api/sessions/user/"+userId).then(results=>results).catch(err=>err)},create:function(newSession){return $.ajax({url:window.location.origin+"/api/sessions/",type:"POST",contentType:"application/json",dataType:"json",data:JSON.stringify(newSession)})},get:function(id){return $http.get(window.location.origin+"/api/sessions/"+id).then(results=>results).catch(err=>err)},update:function(id,newSession){return $.ajax({url:window.location.origin+"/api/sessions/"+id,newSession:newSession,type:"PUT",contentType:"application/json",dataType:"json",data:JSON.stringify(newSession)})},cancel:function(id,cancellor){return $.ajax({url:window.location.origin+"/api/sessions/"+id,type:"DELETE",contentType:"application/json",dataType:"json",data:JSON.stringify(cancellor)})}},$scope.init()}]),angular.module("core").controller("ResearcherPortalController",["$scope","$http","NgTableParams","$rootScope","Authentication",function($scope,$http,NgTableParams,$rootScope,Authentication){let alreadyClicked=!1;$scope.init=function(){$scope.myStudies={},$scope.myStudies.data=[],$scope.upcomingSessions={},$scope.upcomingSessions.data=[],$scope.pastSessions={},$scope.pastSessions.data=[],$scope.compensation={},$scope.compensation.data=[],$scope.user=Authentication.user,console.log($scope.user),$scope.studies.getUserStudies($scope.user._id).then(results=>{results.data.forEach(study=>{study.removed||(study.currentNumber>study.satisfactoryNumber&&(study.satisfied=!0),$scope.myStudies.data.push(study))}),$scope.myStudies=new NgTableParams({count:10,sorting:{title:"asc"}},{counts:[],dataset:$scope.myStudies.data})}).catch(err=>{console.log(err)}),$scope.sessions.getUserSessions($scope.user._id).then(results=>{$scope.allSessions=results.data;const today=new Date;let date;$scope.allSessions.forEach(session=>{date=new Date(session.startTime),session.date=`${date.getMonth()+1}/${date.getDate()}/${date.getFullYear()}`,session.time=`${date.getHours()>12?date.getHours()-12:date.getHours()}:${date.getMinutes()<10?"0"+date.getMinutes():date.getMinutes()} ${date.getHours()>=12?"PM":"AM"}`,0!==session.participants.length&&(date>=today?$scope.upcomingSessions.data.push(session):$scope.pastSessions.data.push(session)),session.participants.forEach(participant=>{if(participant.attended&&"monetary"===participant.compensationType&&!participant.compensationGiven){const temp=participant;temp.studyID=session.studyID,temp.session=session._id,$scope.compensation.data.push(temp)}})}),$scope.upcomingSessions=new NgTableParams({count:10,sorting:{startTime:"asc"}},{counts:[],dataset:$scope.upcomingSessions.data}),$scope.pastSessions=new NgTableParams({count:10,sorting:{startTime:"desc"}},{counts:[],dataset:$scope.pastSessions.data}),$scope.compensation=new NgTableParams({count:10,sorting:{"userID.lastName":"desc"}},{counts:[],dataset:$scope.compensation.data})}).catch(err=>{console.log(err)})},$scope.studyDetails=function(study,index){$scope.currentStudy=study,$scope.currentIndex=index,$scope.error=!1,$("#studyModal").modal("show")},$scope.compensationDetails=function(participant,index){$scope.currentParticipant=participant,$scope.currentIndex=index,$scope.error=!1,$("#compensationModal").modal("show")},$scope.sessionDetails=function(session,currentTable,index){$scope.currentSession=session,$scope.currentIndex=index,$scope.currentTable=currentTable,$scope.error=!1,$("#detailModal").modal("show")},$scope.cancelClose=function(){alreadyClicked||$("#cancelModal").modal("hide")},$scope.closeStudyClose=function(){alreadyClicked||$("#closeStudyModal").modal("hide")},$scope.removeStudyClose=function(){alreadyClicked||$("#removeStudyModal").modal("hide")},$scope.confirmCloseStudy=function(){if(!alreadyClicked){alreadyClicked=!0;const cancellor=$scope.user;$scope.studies.close($scope.currentStudy._id,cancellor).then(()=>{$scope.init(),$("#closeStudyModal").modal("hide"),alreadyClicked=!1}).catch(err=>{$scope.error=!0,console.log(err),alreadyClicked=!1})}},$scope.confirmRemoveStudy=function(){alreadyClicked||(alreadyClicked=!0,$scope.studies.remove($scope.currentStudy._id).then(()=>{$scope.init(),$("#removeStudyModal").modal("hide"),alreadyClicked=!1}).catch(err=>{$scope.error=!0,console.log(err),alreadyClicked=!1}))},$scope.confirmCancel=function(){if(!alreadyClicked){alreadyClicked=!0;const cancellor=$scope.user;cancellor.date=$scope.currentSession.date,cancellor.time=$scope.currentSession.time,$scope.sessions.cancel($scope.currentSession._id,cancellor).then(()=>{$scope.init(),$("#cancelModal").modal("hide"),alreadyClicked=!1}).catch(err=>{$scope.error=!0,console.log(err),alreadyClicked=!1})}},$scope.changeAttendance=function(participant){const change={userID:participant.userID._id,attended:participant.attended};$scope.sessions.attend($scope.currentSession._id,change).then(()=>{alreadyClicked=!1}).catch(err=>{$scope.error=!0,console.log(err),alreadyClicked=!1})},$scope.markCompensated=function(){if(!alreadyClicked){alreadyClicked=!0;const user={userID:$scope.currentParticipant.userID._id};$scope.sessions.compensate($scope.currentParticipant.session,user).then(response=>{$scope.init(),$("#compensationModal").modal("hide"),alreadyClicked=!1}).catch(err=>{$scope.error=!0,console.log(err),alreadyClicked=!1})}},$scope.sessions={getAll:function(){return $http.get(window.location.origin+"/api/sessions/").then(results=>results).catch(err=>err)},getUserSessions:function(userId){return $http.get(window.location.origin+"/api/sessions/user/"+userId).then(results=>results).catch(err=>err)},create:function(newSession){return $.ajax({url:window.location.origin+"/api/sessions/",type:"POST",contentType:"application/json",dataType:"json",data:JSON.stringify(newSession)})},get:function(id){return $http.get(window.location.origin+"/api/sessions/"+id).then(results=>results).catch(err=>err)},update:function(id,newSession){return $.ajax({url:window.location.origin+"/api/sessions/"+id,newSession:newSession,type:"PUT",contentType:"application/json",dataType:"json",data:JSON.stringify(newSession)})},cancel:function(id,cancellor){return $.ajax({url:window.location.origin+"/api/sessions/"+id,type:"DELETE",contentType:"application/json",dataType:"json",data:JSON.stringify(cancellor)})},attend:function(id,change){return $.ajax({url:window.location.origin+"/api/sessions/attend/"+id,type:"PUT",contentType:"application/json",dataType:"json",data:JSON.stringify(change)})},compensate:function(id,user){return $.ajax({url:window.location.origin+"/api/sessions/compensate/"+id,type:"PUT",contentType:"application/json",dataType:"json",data:JSON.stringify(user)})}},$scope.studies={getAll:function(){return $http.get(window.location.origin+"/api/studies/").then(results=>results).catch(err=>err)},getUserStudies:function(userId){return $http.get(window.location.origin+"/api/studies/user/"+userId).then(results=>results).catch(err=>err)},create:function(newStudy){return $.ajax({url:window.location.origin+"/api/studies/",type:"POST",contentType:"application/json",dataType:"json",data:JSON.stringify(newStudy)})},get:function(id){return $http.get(window.location.origin+"/api/studies/"+id).then(results=>results).catch(err=>err)},update:function(id,newStudy){return $.ajax({url:window.location.origin+"/api/studies/"+id,newStudy:newStudy,type:"PUT",contentType:"application/json",dataType:"json",data:JSON.stringify(newStudy)})},close:function(id,cancellor){return $.ajax({url:window.location.origin+"/api/studies/close/"+id,type:"PUT",contentType:"application/json",dataType:"json",data:JSON.stringify(cancellor)})},remove:function(id){return $.ajax({url:window.location.origin+"/api/studies/remove/"+id,type:"PUT"})}},$scope.init()}]),angular.module("core").controller("SessionController",["$scope","$http","NgTableParams","$location","$state",function($scope,$http,NgTableParams,$location,$state){$scope.getAllSessionsByStudyId=function(){$http.get(window.location.origin+"/api/studySessions/"+$scope.studyId).then(results=>{$scope.studySessions=results.data,console.log("tw session data",$scope.studySessions)}).catch(err=>{console.log(err)})},$scope.hoursAndMinutes=function(minutes){const hours=Math.floor(minutes/60),remainderMins=Math.floor(minutes%60),hoursUnits=1===hours?"hour":"hours",hoursStr=hours>0?`${hours} ${hoursUnits}`:"",minutesUnits=1===remainderMins?"minute":"minutes",minutesStr=remainderMins>0?`${remainderMins} ${minutesUnits}`:"";return`${hoursStr}${hoursStr&&minutesStr?" and ":""}${minutesStr}`},$scope.create=function(isValid){$scope.session.sessStart=new Date($scope.session.sessionDate.getFullYear(),$scope.session.sessionDate.getMonth(),$scope.session.sessionDate.getDate(),$scope.session.startTime.getHours(),$scope.session.startTime.getMinutes()),$scope.session.sessEnd=new Date($scope.session.sessionDate.getFullYear(),$scope.session.sessionDate.getMonth(),$scope.session.sessionDate.getDate(),$scope.session.endTime.getHours(),$scope.session.endTime.getMinutes()),$http.post("/api/sessions/create/"+$scope.studyId,$scope.session).success(response=>{console.log("PV","Session Created!"),console.log(response),$state.go("sessions",{studyId:$scope.studyId})}).error(response=>{$scope.error=response.message,alert(response.message)})},function(){const url=$location.absUrl().split("/");$scope.studyId=url[url.length-1],$scope.studySessions=null,$scope.error=null,$scope.getAllSessionsByStudyId(),$scope.myStudySessions=new NgTableParams({count:10,sorting:{title:"asc"}},{counts:[],dataset:$scope.studySessions})}()}]),angular.module("core").controller("StudyDiscoveryController",["$scope","$http","NgTableParams","$rootScope",function($scope,$http,NgTableParams,$rootScope){$scope.init=function(){$("section.ng-scope").css("margin-top","0px"),$("section.ng-scope").css("margin-bottom","0px"),$scope.allStudies=[],$scope.filters={},$scope.user=$rootScope.getMockUser(),$scope.studies.getAll().then(results=>{results.data.forEach(study=>{study.removed||$scope.allStudies.push(study)}),$scope.studyTable=new NgTableParams({count:10,sorting:{title:"asc"}},{counts:[],dataset:$scope.allStudies})}).catch(err=>{console.log(err)})},$scope.expandFilters=function(){$(".filter-area").slideToggle()},$scope.checkFilters=function(){$scope.filters.compensationType?$(".clear-filters-btn").show():$(".clear-filters-btn").hide(),$scope.reloadTable()},$scope.clearFilters=function(){$scope.filters="",$(".clear-filters-btn").hide(),$scope.reloadTable()},$scope.search=function(){$scope.searchQuery=$scope.searchText},$("#search").keypress(e=>{13===e.keyCode&&$("#search-btn").click()}),$scope.reloadTable=function(){$scope.studyTable=new NgTableParams({count:10,sorting:{title:"asc"},filter:$scope.filters},{counts:[],dataset:$scope.allStudies})},$scope.studyDetails=function(study,index){$scope.currentStudy=study,$scope.currentIndex=index,$scope.error=!1,$("#studyModal").modal("show")},$scope.studies={getAll:function(){return $http.get(window.location.origin+"/api/studies/").then(results=>results).catch(err=>err)},getUserStudies:function(userId){return $http.get(window.location.origin+"/api/studies/user/"+userId).then(results=>results).catch(err=>err)},create:function(newStudy){return $.ajax({url:window.location.origin+"/api/studies/",type:"POST",contentType:"application/json",dataType:"json",data:JSON.stringify(newStudy)})},get:function(id){return $http.get(window.location.origin+"/api/studies/"+id).then(results=>results).catch(err=>err)},update:function(id,newStudy){return $.ajax({url:window.location.origin+"/api/studies/"+id,newStudy:newStudy,type:"PUT",contentType:"application/json",dataType:"json",data:JSON.stringify(newStudy)})},close:function(id,cancellor){return $.ajax({url:window.location.origin+"/api/studies/close/"+id,type:"PUT",contentType:"application/json",dataType:"json",data:JSON.stringify(cancellor)})},remove:function(id){return $.ajax({url:window.location.origin+"/api/studies/remove/"+id,type:"PUT"})}},$scope.init()}]),angular.module("core").controller("StudySignupController",["$scope","$http","NgTableParams","$location","$state","Authentication",function($scope,$http,NgTableParams,$location,$state,Authentication){$scope.getAllSessionsByStudyId=function(){$http.get(window.location.origin+"/api/studySessions/signup/"+$scope.studyId).then(results=>{$scope.studySessions=results.data.sessions,$scope.study=results.data.study,$scope.study.closed&&$state.go("forbidden"),$scope.study.compensationType.forEach(type=>{switch(type){case"monetary":$scope.hasMonetary=!0;break;case"extraCredit":$scope.hasExtraCredit=!0}}),console.log("tw get data"),console.log("tw study\n",$scope.study),console.log("tw sessions\n",$scope.studySessions)}).catch(err=>{console.log(err)})},$scope.hoursAndMinutes=function(minutes){const hours=Math.floor(minutes/60),remainderMins=Math.floor(minutes%60),hoursUnits=1===hours?"hour":"hours",hoursStr=hours>0?`${hours} ${hoursUnits}`:"",minutesUnits=1===remainderMins?"minute":"minutes",minutesStr=remainderMins>0?`${remainderMins} ${minutesUnits}`:"";return`${hoursStr}${hoursStr&&minutesStr?" and ":""}${minutesStr}`},$scope.studySignupModal=function(session,index){$scope.currentSession=session,$scope.currentIndex=index,$scope.error=!1,$("#studySignupModal").modal("show")},$scope.studySignup=function(valid){$scope.error=null,valid?"extraCredit"!==$scope.credentials.compensation||$scope.credentials.classCode?($scope.credentials.sessionId=$scope.currentSession.id,$scope.credentials.study=$scope.study,$scope.credentials.user={_id:$scope.user._id,firstName:$scope.user.firstName,lastName:$scope.user.lastName,email:$scope.user.email},$scope.credentials.newSession=$scope.currentSession,$http.post(window.location.origin+"/api/studySession/signup",$scope.credentials).then(()=>{alert(`You are successfully signed up for ${$scope.study.title}!`),$("#studySignupModal").modal("hide"),$state.go("participant-portal")}).catch(err=>{$scope.error=err})):$scope.error="Please select a class code":$scope.error="Please select a compensation type"},$scope.hardCodedClasses=["CEN3031","COP4600","EEL3701","CIS4930"],function(){const url=$location.absUrl().split("/");$scope.studyId=url[url.length-1],$scope.studySessions=null,$scope.study=null,$scope.error=null,$scope.currentSession=null,$scope.hasMonetary=!1,$scope.hasExtraCredit=!1,$scope.credentails=null,$scope.user=Authentication.user,console.log($scope.user),$scope.getAllSessionsByStudyId(),$scope.myStudySessions=new NgTableParams({count:10,sorting:{title:"asc"}},{counts:[],dataset:$scope.studySessions})}()}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),!(inputName=$interpolate(inputNgEl.attr("name")||"")(scope)))throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)}),scope.$on("show-errors-reset",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return reset()}),toggleClasses=function(invalid){if(el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess)return el.toggleClass("has-success",showValidationMessages&&!invalid)}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item",class:options.class,roles:null===options.roles||void 0===options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||void 0===options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").factory("Sessions",["$http",function($http){return{getAll:function(){return $http.get(window.location.origin+"/api/sessions/")},getUserSessions:function(userId){return $http.get(window.location.origin+"/api/sessions/user/"+userId)},create:function(newSession){return $http.post(window.location.origin+"/api/sessions/",newSession)},get:function(id){return $http.get(window.location.origin+"/api/sessions/"+id)},update:function(id,newSession){return $http.put(window.location.origin+"/api/sessions/"+id,newSession)},delete:function(id){return $http.delete(window.location.origin+"/api/sessions/"+id)}}}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin")}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{abstract:!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{abstract:!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.faculty-signup",{url:"/signup/faculty",templateUrl:"modules/users/client/views/authentication/faculty-signup.client.view.html"}).state("authentication.researcher-signup",{url:"/signup/researcher",templateUrl:"modules/users/client/views/authentication/researcher-signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("authentication.email-sent",{url:"/email-sent",templateUrl:"modules/users/client/views/authentication/email.client.view.html"}).state("authentication.verify",{url:"/verify/:userId",templateUrl:"modules/users/client/views/authentication/verify.client.view.html"}).state("password",{abstract:!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{abstract:!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){if($scope.error=null,$scope.credentials.birthday=$("#birthday").val(),console.log($scope.credentials),!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),$scope.error="All fields are required.",!1;delete $scope.credentials.confirm,$http.post("/api/auth/signup",$scope.credentials).success(response=>{$scope.authentication.user=response,$state.go("authentication.email-sent")}).error(response=>{$scope.error=response.message})},$scope.facultySignup=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),$scope.error="All fields are required.",!1;delete $scope.credentials.confirm,$http.post("/api/auth/signup/faculty",$scope.credentials).success(response=>{$scope.authentication.user=response,$state.go("authentication.email-sent")}).error(response=>{$scope.error=response.message})},$scope.researcherSignup=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),$scope.error="All fields are required.",!1;delete $scope.credentials.confirm,$http.post("/api/auth/signup/researcher",$scope.credentials).success(response=>{$scope.authentication.user=response,$state.go("authentication.email-sent")}).error(response=>{$scope.error=response.message})},$scope.signin=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;$http.post("/api/auth/signin",$scope.credentials).success(response=>{localStorage.setItem("user",JSON.stringify(response)),redirect(response)}).error(response=>{$scope.error=response.message})},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirectTo="+encodeURIComponent($state.previous.href)),$window.location.href=url},$scope.validateConfirmPassword=(confirmation=>{const password=$scope.userForm.password.$viewValue;confirmation&&password&&confirmation!==password?$scope.userForm.confirm.$setValidity("goodConfirm",!1):$scope.userForm.confirm.$setValidity("goodConfirm",!0)});const redirect=response=>{console.log(response),$scope.authentication.user=response;let destination;switch($scope.authentication.user.role){case"participant":destination="participant-portal";break;case"faculty":destination="faculty-portal";break;case"researcher":destination="researcher-portal";break;case"admin":destination="admin-portal";break;default:$scope.error="Your role doesn't exist, what did you do?"}$scope.error||$state.go(destination,$state.previous.params)}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1;$http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(response=>{$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1;$http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(response=>{$scope.error=response.message})}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","passwordForm"),!1;$http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;new Users($scope.user).$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").controller("VerificationController",["$scope","$state","$stateParams","$http","$location","$window","Authentication",function($scope,$state,$stateParams,$http,$location,$window,Authentication){!function(){$scope.error=!1;const pass=$stateParams.userId;console.log(pass),$http.post("/api/auth/verify/"+pass,$scope.credentials).success(response=>{$scope.user=response}).error(response=>{$scope.error=!0})}()}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){let status=!0;if(password){const result=PasswordValidator.getResult(password);let requirementsIdx=0;const requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(()=>{let combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},value=>{value&&(ngModel.$validators.passwordVerify=function(password){return scope.passwordVerify===password})})}}}]),angular.module("users").directive("lowercase",()=>({require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(input=>input?input.toLowerCase():""),element.css("text-transform","lowercase")}})),angular.module("users").factory("Authentication",["$window","$injector",function($window){return{user:JSON.parse(localStorage.getItem("user"))}}]),angular.module("users").factory("PasswordValidator",["$window",function($window){const owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return owaspPasswordStrengthTest.config({allowPassphrases:!1,maxLength:128,minLength:8,minPhraseLength:20,minOptionalTestsToPass:4}),{getResult:function(password){return owaspPasswordStrengthTest.test(password)},getPopoverMsg:function(){return"Please enter a password with at least 8 characters and at least one number, lowercase, uppercase, and special character."}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").factory("User",["$resource",function($resource){return $resource("/api/users/:id",{id:"_id"},{update:{method:"PUT"}})}]);